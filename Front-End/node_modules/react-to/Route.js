'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFunctional = require('react-functional');

var _reactFunctional2 = _interopRequireDefault(_reactFunctional);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _matchPath = require('./match/matchPath');

var _matchPath2 = _interopRequireDefault(_matchPath);

var _Util = require('./Util');

var _HistoryControl = require('./HistoryControl');

var _HistoryControl2 = _interopRequireDefault(_HistoryControl);

var _RouteControl = require('./RouteControl');

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _RouteUtil2 = require('./RouteUtil');

var _RouteUtil3 = _interopRequireDefault(_RouteUtil2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Route = function (_RouteUtil) {
  _inherits(Route, _RouteUtil);

  function Route() {
    var _Object$getPrototypeO;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Route)).call.apply(_Object$getPrototypeO, [this].concat(args)));

    _this.locationChanged = function () {
      _this.routeCheckEntry();
    };

    _this.getChildContext = function () {
      if (!_this.context.routes) {
        return {
          routes: _this.initRoutes,
          parentRouteIndex: 0
        };
      } else {
        return {
          parentRouteIndex: _this.context.parentRouteIndex + 1
        };
      }
    };

    _this.routeCheckEntry = function () {

      var matchData = _this.checkPath(_this.context.history.location || {});

      if (!matchData.match) {
        _this.checkMiss();
      }

      if (matchData.match) {
        _this.setToMount(matchData);
        return;
      }

      _this.setToUnmount(matchData);
    };

    _this.setToMount = function (matchData) {

      _this.resetChildContext(true);

      /** Step 1 : dynamic load component */
      _this.loadComponent(function (succeed, component) {
        if (!succeed) {
          return;
        }
        _this.component = (0, _Util.isStatelessComponent)(component) ? (0, _reactFunctional2.default)({ render: component }) : component;

        /** Step 2 : check enter filters */
        _this.checkFilter(_this.props.enterFilter, function (passed) {
          if (!passed) {
            return;
          }

          /** Step 3 : check 'redirect' props */
          var redirect = _this.props.redirect;

          if (redirect && typeof redirect === 'string') {
            _HistoryControl2.default.replace(redirect);
            return;
          }

          _this.updateMountStatus({ status: 1, matchData: matchData });
        });
      });
    };

    _this.setToUnmount = function () {
      // this.resetChildContext(false)

      /** Step 1: check cache, link cache & tag cache */
      var cache = _this.isCached();
      if (cache) {
        _this.checkPath(_this.cacheLocation);
        if (_this.state.mountBy !== cache && _this.state.status === 1) {

          _this.updateMountStatus({ status: 1, mountBy: cache, matchData: _this.state.cacheMatch });
        }
        return;
      }

      /** Step 2 : check leave filters */
      _this.checkFilter(_this.props.leaveFilter, function (passed) {
        if (!passed) {
          return;
        }
        _this.updateMountStatus({ status: 0 });
      });
    };

    _this.updateMountStatus = function (_ref) {
      var status = _ref.status;
      var mountBy = _ref.mountBy;
      var matchData = _ref.matchData;


      if (typeof mountBy === 'undefined' || mountBy === null) {
        mountBy = 0;
      }
      if (!(0, _Util.isMountedComponent)(_this)) {
        return;
      }
      if (status === 1) {
        _this.setState({
          status: status,
          mountBy: mountBy,
          cacheMatch: matchData,
          selfPathname: _this.getSelfPath(matchData && matchData.matcher)
        });
      } else {
        _this.setState({ status: status, mountBy: mountBy });
      }

      _this.checkCacheTag(status === 0);
    };

    _this.componentWillUnmount = function () {
      _this.unsubscribe();
      _this.checkCacheTag(true);
    };

    _this.render = function () {

      /** 1. unmount state */
      if (_this.state.status === 0) {
        return null;
      }

      var children = _this.props.children;

      /** 2. mount state */
      /** 2.1 check component props */
      if (_this.component) {
        var props = (0, _Util.objectWithoutProperties)(_this.props, ['children', 'component', 'loadComponent', 'enterFilter', 'leaveFilter', 'path', 'redirect', 'cache', 'index', 'miss']);
        // add route state to props
        props.route = { isActive: _this.state.mountBy === 0 };

        props.ref = 'component';

        // create element
        return _react2.default.createElement(_this.component, _extends({ pathname: _this.state.selfPathname
        }, props, {
          params: _this.state.cacheMatch && _this.state.cacheMatch.matcher ? _this.state.cacheMatch.matcher.params || {} : {}
        }), children);
      }

      /** 2.2 check children */
      if (!children) {
        _Logger2.default.error('Route component without children.');
        return null;
      }
      if (_react2.default.isValidElement(children)) {
        return _react2.default.Children.only(children);
      }
      _Logger2.default.error('When `Route` component has no component property, it\'s children must be a single tag (not an array), like `div`|`view` .');
      return null;
    };

    _this.state = {
      status: 0, // 0: unmount, 1: mounted
      mountBy: 0 // 0: mount by route or none, 1: mount by 'cache', 2: mount by 'CacheLink'
    };

    _this.unsubscribe = _this.context.subscribe(_this.locationChanged);

    _this.matcher = null;
    _this.component = null;

    if (!_this.context.routes) {
      _this.initRoutes = [];
    }
    return _this;
  }

  _createClass(Route, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.locationChanged();
    }

    /**
     * entry of check
     * compute route mount's state
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (this.props.offDirtyCheck) {
        return true;
      }
      if (nextState.status) {
        return true;
      }
      return !(0, _Util.compare)(nextProps, this.props) || !(0, _Util.compare)(nextState, this.state);
    }

    /**
     * set to mount state
     * (also invoke by outside)
     */


    /**
     * set to unmount state
     */


    /** update bind state */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.hideOrShow();
    }
  }]);

  return Route;
}(_RouteUtil3.default);

Route.contextTypes = {
  routes: _react2.default.PropTypes.array,
  history: _react2.default.PropTypes.any,
  subscribe: _react2.default.PropTypes.any,
  parentRouteIndex: _react2.default.PropTypes.number
};
Route.propTypes = {
  component: _react2.default.PropTypes.any,
  loadComponent: _react2.default.PropTypes.any,
  enterFilter: _react2.default.PropTypes.array,
  leaveFilter: _react2.default.PropTypes.array,
  path: _react2.default.PropTypes.string,
  redirect: _react2.default.PropTypes.string,
  multiple: _react2.default.PropTypes.any,
  cache: _react2.default.PropTypes.any,
  index: _react2.default.PropTypes.any,
  miss: _react2.default.PropTypes.any,
  offDirtyCheck: _react2.default.PropTypes.any,
  children: _react2.default.PropTypes.any
};
Route.childContextTypes = {
  routes: _react2.default.PropTypes.any,
  parentRouteIndex: _react2.default.PropTypes.number
};
exports.default = Route;